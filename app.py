# ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛
import streamlit as st
import pandas as pd

# --- ржЕрзНржпрж╛ржкрзЗрж░ рж╢рж┐рж░рзЛржирж╛ржо ржПржмржВ ржкрзНрж░рж╛ржержорж┐ржХ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
st.set_page_config(page_title="ржбрзЗржЯрж╛ рж╕рж╛рж░рзНржЪ ржЕрзНржпрж╛ржк", layout="wide")
st.title("ЁЯУК ржПржХрзНрж╕рзЗрж▓ ржбрзЗржЯрж╛ рж╕рж╛рж░рзНржЪ ржЕрзНржпрж╛ржк")
st.write("ржпрзЗржХрзЛржирзЛ ржХрж▓рж╛ржо ржЕржирзБржпрж╛рзЯрзА ржбрзЗржЯрж╛ рж╕рж╛рж░рзНржЪ ржХрж░рзБржиред")

# --- ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ржПржмржВ ржХрзНржпрж╛рж╢рж┐ржВ ---
# @st.cache_data ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржЕрзНржпрж╛ржк ржжрзНрж░рзБржд ржХрж╛ржЬ ржХрж░рзЗ, ржХрж╛рж░ржг ржПржЯрж┐ ржмрж╛рж░ржмрж╛рж░ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рзЗ ржирж╛
@st.cache_data
def load_data(file_path):
    try:
        df = pd.read_excel(file_path)
        return df
    except FileNotFoundError:
        st.error(f"Error: '{file_path}' ржлрж╛ржЗрж▓ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржжрзЯрж╛ ржХрж░рзЗ рж╕ржарж┐ржХ рж╕рзНржерж╛ржирзЗ ржлрж╛ржЗрж▓ржЯрж┐ рж░рж╛ржЦрзБржиред")
        return None
    except Exception as e:
        st.error(f"ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: {e}")
        return None

# ржбрзЗржЯрж╛ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛
df = load_data('data.xlsx')

# ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣рж▓рзЗ ржмрж╛ржХрж┐ ржЕрзНржпрж╛ржк ржжрзЗржЦрж╛ржмрзЗ
if df is not None:
    
    # --- рж╕рж╛ржЗржбржмрж╛рж░: рж╕рж╛рж░рзНржЪ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ---
    st.sidebar.header("рж╕рж╛рж░рзНржЪ ржЕржкрж╢ржи")

    # ржХрж▓рж╛ржо рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж╛рж░ ржЕржкрж╢ржи
    # df.columns.tolist() рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржПржХрзНрж╕рзЗрж▓рзЗрж░ рж╕ржм ржХрж▓рж╛ржорзЗрж░ ржирж╛ржо ржирж┐рзЯрзЗ ржЖрж╕ржмрзЗ
    search_column = st.sidebar.selectbox(
        "ржХрзЛржи ржХрж▓рж╛ржорзЗ рж╕рж╛рж░рзНржЪ ржХрж░рждрзЗ ржЪрж╛ржи?",
        options=df.columns.tolist(),
        index=1  # ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржжрзНржмрж┐рждрзАрзЯ ржХрж▓рж╛ржоржЯрж┐ (ржкржгрзНржпрзЗрж░ ржирж╛ржо) рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж╛ ржерж╛ржХржмрзЗ
    )

    # рж╕рж╛рж░рзНржЪ ржХрж░рж╛рж░ ржЬржирзНржп ржЯрзЗржХрзНрж╕ржЯ ржЗржиржкрзБржЯ ржмржХрзНрж╕
    search_query = st.sidebar.text_input(
        f"'{search_column}' ржЕржирзБржпрж╛рзЯрзА рж╕рж╛рж░рзНржЪ ржХрж░рзБржи:",
        placeholder="ржПржЦрж╛ржирзЗ рж╕рж╛рж░рзНржЪ ржХрж░рзБржи..."
    )

    # --- ржорзВрж▓ ржкрзЗржЗржЬ: ржлрж▓рж╛ржлрж▓ ржкрзНрж░ржжрж░рзНрж╢ржи ---
    st.divider() # ржПржХржЯрж┐ ржмрж┐ржнрж╛ржЬржХ рж░рзЗржЦрж╛

    # ржпржжрж┐ рж╕рж╛рж░рзНржЪ ржмржХрзНрж╕рзЗ ржХрж┐ржЫрзБ рж▓рзЗржЦрж╛ рж╣рзЯ
    if search_query:
        # .str.contains() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рж╛рж░рзНржЪ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред case=False ржорж╛ржирзЗ ржЫрзЛржЯ/ржмрзЬ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░ ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦржмрзЗ ржирж╛ред
        mask = df[search_column].astype(str).str.contains(search_query, case=False, na=False)
        result_df = df[mask]

        st.write(f"'{search_query}' ржПрж░ ржЬржирзНржп **{len(result_df)}** ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ:")
        
        # ржлрж▓рж╛ржлрж▓ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        st.dataframe(result_df, use_container_width=True)

    # ржпржжрж┐ рж╕рж╛рж░рзНржЪ ржмржХрзНрж╕ ржЦрж╛рж▓рж┐ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржкрзБрж░рзЛ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗ
    else:
        st.write("рж╕ржорзНржкрзВрж░рзНржг ржбрзЗржЯрж╛ ржЯрзЗржмрж┐рж▓:")
        st.dataframe(df, use_container_width=True)